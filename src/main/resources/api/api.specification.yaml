openapi: 3.0.0

#API Metadata
info:
  title: My New Api
  version: '1.0'
  description: |-
    API Specification (kinda like graphql schema)
  contact:
    name: Nextodev
servers:
  - url: 'https://my.domain.com/'
    description: dev

#Endpoints:

paths:
  /hello:
    parameters: [ ]
    post:
      description: Says hello to the client

      #Request body definition
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: HelloObject
              type: object
              properties:
                hello:
                  $ref: '#/components/schemas/HelloObject'
                startDate:
                  type: string
                  format: date
                  description: Start date
                  example: "2021-01-30"
                endDate:
                  type: string
                  format: date
                  description: Creation date
                  example: "2021-01-30"
            examples:
              example-request:
                value:
                  hello:
                    UUID: '3c018fa2-82b0-11ed-a1eb-0242ac120002'
                    message: 'Hello World!'
                  startDate: "2021-01-30"
                  endDate: "2021-01-30"

      #URL params - e.g. ?format=PDF
      parameters:
        - name: format
          in: query
          description: Export format
          required: false
          schema:
            type: string
            enum: [ PDF, CSV ]
            default: PDF

      #Responses
      responses:
        '200':
          description: OK
          headers: { }
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          description: Internal Server Error

# Custom 'types'
components:
  schemas:
    HelloObject:
      title: HelloObject
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        message:
          type: string
          nullable: false

    UUID:
      title: uuid
      type: string
      pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
      minLength: 36
      maxLength: 36

    Problem:
      type: object
      title: 'prolem-type'
      description: |-
      properties:
        type:
          type: string
          format: uri
          description: |
            An absolute URI that identifies the problem type.
            When dereferenced, it may provide human-readable documentation for the problem, e.g. using HTML.
          example: 'https://my.domain.com/problem/service-problem'
        title:
          type: string
          description: |
            In REST terms this usually refers to the status code message:
              * Service Unavailable
              * Forbidden
              * Unprocessable Entity
          example: Service Unavailable
        status:
          type: integer
          format: int32
          description: |
            The HTTP status code generated by the origin server for this occurrence of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 503
        detail:
          type: string
          description: |
            A human-readable explanation specific to this occurrence of the problem:
              * Request could not be processed due to payload validation errors
              * Could not connect to remote service, connection timed out
          example: Connection to database timed out
        instance:
          type: string
          format: uri
          description: A *relative* URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced and can be used to recreate the problem later.
          example: 'https://my.domain.com/hello'
        fieldDetails:
          type: array
          description: 'An optional list of field related details of the problem (business validations, etc.).'
          items:
            type: object
            description: Field level detail
            properties:
              errorCode:
                type: integer
                description: |
                  Error code for the field related issue:

                  * 1000 - missing mandatory field
                  * 2000 - invalid field (of wrong type, not following given pattern, etc.)
                  * 3000 - broken reference (identifier given does not exist at referred system, etc.)
                  * 4000 - business validation error (scan code and inventory number cannot be identical, etc.)
                  * 5000 - unknown error
              fieldName:
                type: string
                description: The name of the field (or fields) the problem is related to.
              problem:
                type: string
                description: A detailed description of the problem itself.
            required:
              - errorCode
              - fieldName
        correlationId:
          type: string
          description: A unique identifier assigned to each API call reaching the application.
          example: '32a7av59-612e-49fd-be57-890f2e2805ec'
      required:
        - type
        - title
        - correlationId

  responses:
    BadRequest:
      description: |-
        Bad Request

        The server could not understand the request due to invalid syntax.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
          examples:
            BadRequest:
              value:
                type: 'https://my.domain.com/problem/bad_request'
                title: Bad Request
                status: 400
                detail: The server could not understand the request due to invalid syntax.
                instance: /export?format=non-existing-format
                errors:
                  - code: 1000
                    fieldName: format
                    message: No such format
    Unauthorized:
      description: |-
        Unauthorized

        The client needs to authenticate itself to get the requested
        resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
          examples:
            Unauthorized:
              value:
                type: 'https://my.domain.com/problem/unauthorized'
                title: Unauthorized
                status: 401
                detail: The caller must be authenticated.
                instance: /export
    Forbidden:
      description: |-
        Forbidden

        The client is unauthorized to retrieve the resource,
        the identity is known.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
          examples:
            Forbidden:
              value:
                type: 'https://my.domain.com/problem/forbidden'
                title: Forbidden
                status: 403
                detail: The client is not authorized for the operation on the given resource.
                instance: /export
    Conflict:
      description: |-
        Conflict

        The client sent a request that is in conflict with the status
        of the server.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
          examples:
            Forbidden:
              value:
                type: 'https://my.domain.com/problem/conflict'
                title: Conflict
                status: 409
                detail: The request conflicts with the current status of the server.
                instance: /export

  securitySchemes:
    HelloAPIGateway:
      type: oauth2
      flows:
        password:
          tokenUrl: 'https://my.domain.com/oauth2/tokens'
          refreshUrl: 'https://my.domain.com/oauth2/tokens'
          scopes:
            write: Create & update data

